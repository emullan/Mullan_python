Mullan_HW3

1. Histogram
def histogram(list):
    for int in list:
        y=int
        x=0
        string = ''
        while x<int:
            string = string + '*'
            x=x+1
            
        print (string)
        
2. maximum in a list
def max_in_list(list):
    x=1
    y=len(list)
    max=list[0]
    
    while x<y:
        if list[x]>max:
            max=list[x]
            x=x+1
        else:
            x=x+1
    print (max)
    
3. Lengths of words
def listofwords(words):     #words must be a list of strings in brackets. For example: ['Hoya','Saxa','Jack']
    numberlist = []         #Blank list to put lengths in  
    x=0                     #counter for the position in the input words
    for string in words:
        numberlist.append(len(words[x]))    #Places the len of the string in the list   
        x=x+1                               #Increase the counter to get the length of the next string
    return (numberlist)

4. Find longest word
def find_longest_word(words):           #words must be a list of strings in brackets
    longest = words[0]                  #assume the first one is the longest
    x=0                                 #Counter
    for string in words:
        if len(words[x])>len(longest):  #if the string that we are looking at is longer than the previous longest word,
            longest = words[x]          #It is the new longest word
        
        x=x+1                           #Increase the counter to check the next word in the list
                
    return len(longest)                 #Return the length of the longest word

5. Filter long words
def filter_long_words(words,n):
    longwords = []                      #Create an empty list to put my words in if they fit criteria
    for string in words:                #Check every string in the list
        if len(string)>n:               #Add the string to the empty list longwords if it is long enough
            longwords.append(string)
            
    return longwords
    
6. advanced palindromes
from string import punctuation
def strip_string(s):                #This function converts capital case to lower case and strips punctuation and blank spaces
    
    new=list(s)                     #Converts the string s to a list and replaces spaces with nothing
    x=0
    for char in new:
        if new[x]==' ':
            new[x]=''
        
        x=x+1
    d = ''.join(new)                #Joins the list into a string d
    d=d.lower()                     #Converts upper case letters in string d to lower case
    return ''.join(c for c in d if c not in punctuation)    #removes punctuation

def reverse(string):        #Gets the palindrome of a string
  y = len(string)-1         #Establish y as the index to pull characters from string
  newstring = ''            #Establish the output newstring as an empty string to put characters into
  
  while y>=0:
    newstring = newstring + string[y]     #Insert characters into newstring starting with the last character in string
    y=y-1
    
  return (newstring)

def is_palindrome(string):
    stripped=strip_string(string)                   #Use the strip_string function to remove punctuation and spaces
    newstring = reverse(stripped)                 #Use the reverse function to get the palindrome of the stripped string
  
    if stripped==newstring:                         #compare the stripped string to its palindrome
            return True
    
    else:
            return False
            
7. Pangrams
def pangram(string):
    string=string.lower()
    if ('a' in string) and ('b' in string) and ('c' in string) and ('d' in string) and ('e' in string) and ('f' in string) and ('g' in string) and ('h' in string) and ('i' in string) and ('j' in string) and ('k' in string) and ('l' in string) and ('m' in string) and ('n' in string) and ('o' in string) and ('p' in string) and ('q' in string) and ('r' in string) and ('s' in string) and ('t' in string) and ('u' in string) and ('v' in string) and ('w' in string) and ('x' in string) and ('y' in string) and ('z' in string):
        return True
    else:
        return False
        
8. Coke on the wall
def lyrics():
    x=99
    while x>0:
        print (x , ' bottles of coke on the wall, ' , x , 'bottles of coke. \nTake one down, pass it around, ' , x-1 , ' bottles of coke on the wall.')
        x=x-1
        
9. English to swedish translator
def translate(list):                    #Input must be a list of strings. Won't work if you input a string that is not in the dictionary
    d={'merry':'god','christmas':'jul','and':'och','happy':'got','new':'nytt','year':'ar'}
    for word in list:
        word=d[word]
        return word
        
10. Character Frequency counter
def char_freq(string):
    lis=list(string)                        #Turn the string into a list
    d = {x:lis.count(x) for x in lis}       #Create a dictionary mapping the character to the count for each character
    return d                                #Return the dictionary



11. Caesar Cypher
def cypher(string):
    key={'a':'n','b':'o','c':'p','d':'q','e':'r','f':'s','g':'t','h':'u','i':'v','j':'w','k':'x','l':'y','m':'z','n':'a','o':'b','p':'c','q':'d','r':'e','s':'f','t':'g','u':'h','v':'i','w':'j','x':'k','y':'l','z':'m','A':'N','B':'O','C':'P','D':'Q','E':'R','F':'S','G':'T','H':'U','I':'V','J':'W','K':'X','L':'Y','M':'Z','N':'A','O':'B','P':'C','Q':'D','R':'E','S':'F','T':'G','U':'H','V':'I','W':'J','X':'K','Y':'L','Z':'M'}
    lis=list(string)                        #Break the string down to a list of characters
    x=0
    for char in lis:                        #Run through each character in the list
        if char in key:                     #Check to make sure the character is in the dictionary (exclude punctuation and spaces)
            lis[x]=key[lis[x]]              #Replace the character with the corresponding cipher key
        x=x+1
    s=''.join(lis)                          #Join the characters back to a string s
    return s
