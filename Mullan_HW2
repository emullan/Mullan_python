#Mullan HW2

1.
def fib(n):
  a,b = 0,1
  
  while a<n:
    print (a,end=', ')
    a,b = b,a+b
  print a
  
  
2.
def mymax(a,b):
  if a==b:
    print "They are equal"
    
  if a > b:
    print a
    
  if a<b:
    print b
    
    
3.
def max_of_three(a,b,c):
  Max = a
  
  if b>a:
    Max = b
    
  if c>Max:
    Max = c

  print Max
    
4.
def mylen('w'):     # w is the string input
  length=0
  for char in w:
    length = length + 1
    
  print length
  
  
5.
def vowel('l'):    # l is the one letter input
  x=0
  if l == 'a':
    print 'True'
    x=1
    
  if l == 'e':
    print 'True'
    x=1
    
  if l == 'i':
    print 'True'
    x=1
    
  if l == 'o':
    print 'True'
    x=1
    
  if l == 'u':
    print 'True'
    x=1
    
  if l == 'y':
    print 'Sometimes'
    
  else:
    print 'False'

6.
def translate('string'):    #string is the input string for this function
  y=0
  z=len(string)   # sets up a comparison point for i know when to stop my loop
  
  while y<z
    vowel(string[y])    #Uses the function vowel from problem 5 to see if the character is a vowel. If x=0, the character is a consonant
    
    if x=0:
      string = string[:y] + 'o' + string[y] + string[y+1:]    #string is now the string with the new letters inserted
      y=y+3
      z=len(string)                                           #Reset te new string length for comparison
      
    else:
      y=y+1                                                   #If the character is a vowel, increment y and check the next index
      
  print string
  
7.
def sum(list):      #The input is a list of numbers
  
  sum = 0
  x=0
  y=len(list)   #Set up a counter to make sure I stop adding at the end of the list
  
  while x<y
    sum = sum + list[x]
    x = x+1
    
  print sum
  
def multiply(list):  #The input is a list of numbers
  product = 1
  x=0
  y=len(list)   #Set up a counter to make sure I stop adding at the end of the list
  
  while x<y
    product = product * list[x]
    x = x+1
    
  print product
  
8.
def reverse(string):
  y = len(string)-1         #Establish y as the index to pull characters from string
  newstring = ''            #Establish the output newstring as an empty string to put characters into
  
  while y>=0:
    newstring = newstring + string[y]     #Insert characters into newstring starting with the last character in string
    y=y-1
    
  print newstring
  
9.
def is_palindrome(string):
  reverse(string)                 #Use the reverse function from the previous exercise
  
  if string==newstring:
    print 'True'
    
  else:
    print 'False'

  
